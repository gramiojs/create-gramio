import type { Preferences, PreferencesType } from "../utils.js";

const links: Record<
	| Exclude<
			| "GramIO"
			| PreferencesType["linter"]
			| PreferencesType["orm"]
			| PreferencesType["plugins"][0]
			| PreferencesType["others"][0]
			| PreferencesType["database"]
			| "Fluent2ts",
			"None"
	  >
	| "Docker",
	string
> = {
	GramIO: "[GramIO](https://gramio.dev/)",
	ESLint: "[ESLint](https://eslint.org/)",
	Biome: "[Biome](https://biomejs.dev/)",
	Prisma: "[Prisma](https://www.prisma.io/)",
	Drizzle: "[Drizzle](https://orm.drizzle.team/)",
	Husky: "[Husky](https://typicode.github.io/husky/)",
	PostgreSQL: "[PostgreSQL](https://www.postgresql.org/)",
	MySQL: "[MySQL](https://www.mysql.com/)",
	MongoDB: "[MongoDB](https://www.mongodb.com/)",
	SQLite: "[SQLite](https://sqlite.org/)",
	SQLServer: "[SQLServer](https://www.microsoft.com/sql-server)",
	CockroachDB: "[CockroachDB](https://www.cockroachlabs.com/)",
	Session: "[Session](https://gramio.dev/plugins/official/session.html)",
	Autoload: "[Autoload](https://gramio.dev/plugins/official/autoload.html)",
	Prompt: "[Prompt](https://gramio.dev/plugins/official/prompt.html)",
	"Auto-retry":
		"[Auto-retry](https://gramio.dev/plugins/official/auto-retry.html)",
	"Media-cache":
		"[Media-cache](https://gramio.dev/plugins/official/media-cache.html)",
	I18n: "[I18n](https://gramio.dev/plugins/official/i18n.html)",
	"Media-group":
		"[Media-group](https://gramio.dev/plugins/official/media-group.html)",
	"Auto answer callback query":
		"[Auto answer callback query](https://gramio.dev/plugins/official/auto-answer-callback-query)",
	Fluent2ts: "[Fluent2ts](https://github.com/kravetsone/fluent2ts)",
	Scenes: "[Scenes](https://gramio.dev/plugins/official/scenes)",
	Jobify: "[Jobify](https://github.com/kravetsone/jobify)",
	Docker: "[Docker](https://www.docker.com/)",
	Posthog: "[Posthog](https://posthog.com/docs/libraries/node)",
	Split: "[Split](https://gramio.dev/plugins/official/split.html)",
	Pagination:
		"[Pagination](https://gramio.dev/plugins/official/pagination.html)",
	Views: "[Views](https://gramio.dev/plugins/official/views.html)",
};

export function getReadme({
	projectName,
	linter,
	orm,
	database,
	plugins,
	others,
	docker,
	i18nType,
}: Preferences) {
	const stack = [];

	stack.push(`- Telegram Bot API framework - ${links.GramIO}`);
	if (orm !== "None") stack.push(`- ORM - ${links[orm]} (${links[database]})`);
	if (linter !== "None") stack.push(`- Linter - ${links[linter]}`);
	if (plugins.length)
		stack.push(`- GramIO plugins - ${plugins.map((x) => links[x]).join(", ")}`);
	if (others.length || plugins.includes("I18n"))
		stack.push(
			`- Others tools - ${[
				docker ? links.Docker : undefined,
				...others.map((x) => links[x]),
				i18nType === "Fluent" ? links.Fluent2ts : undefined,
			]
				.filter(Boolean)
				.join(", ")}`,
		);

	const instruction = [];

	instruction.push("## Development\n");

	if (docker) {
		instruction.push(
			"Start development services (DB, Redis etc):\n",
			"```bash",
			"docker compose -f docker-compose.dev.yml up",
			"```\n",
		);
	}

	instruction.push("Start the bot:\n", "```bash", "bun dev", "```\n");

	if (orm === "Drizzle") {
		instruction.push(
			"## Migrations\n",
			"Push schema to Database:\n",
			"```bash",
			"bunx drizzle-kit push",
			"```",
			"Generate new migration:\n",
			"```bash",
			"bunx drizzle-kit generate",
			"```",
			"Apply migrations:\n",
			"```bash",
			"bunx drizzle-kit migrate",
			"```\n",
		);
	}

	if (orm === "Prisma") {
		instruction.push(
			"## Migrations\n",
			"Generate new migration:\n",
			"```bash",
			"bunx prisma migrate dev",
			"```",
			"Apply migrations:\n",
			"```bash",
			"bunx prisma migrate deploy",
			"```\n",
		);
	}

	instruction.push("## Production\n");

	if (docker) {
		instruction.push(
			"Run project in `production` mode:\n",
			"```bash",
			"docker compose up -d",
			"```",
		);
	} else
		instruction.push(
			"Run project in `production` mode:\n",
			"```bash",
			"bun start",
			"```",
		);

	return [
		`# ${projectName}`,
		"",
		"This template autogenerated by [create-gramio](https://github.com/gramiojs/create-gramio)",
		"",
		"### Stack",
		...stack,
		"",
		// "### Instructions\n",
		...instruction,
	].join("\n");
}

export function getMonorepoReadme({ projectName }: Preferences) {
	return [
		`# ${projectName}`,
		"",
		"This template autogenerated by [create-gramio](https://github.com/gramiojs/create-gramio)",
		"",
	].join("\n");
}
